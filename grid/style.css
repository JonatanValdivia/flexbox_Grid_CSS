body{
  font-family: arial;
  color: black;
}

.conatiner{
  display: grid; /*Grid siginifica grade*/
  /*inline-grid utiliza toda a linha do maior contúdo que há dentro de um elemento filho, se todos tiverem o mesmo tamanho, todos então terão tembém
  Ex: se a maior linha fosse de 500px, por conta do conteúdo, todas as outras linhas, mesmo que curtas também dariam esse mesmo tamanho*/
  /*grid-template-columns: auto auto auto;Dessa forma determinamos que haverão três colunas grid com os mesmos tamanhos*/
  
  /* grid-template-columns: 100px 150px 200px auto; */
  grid-template-columns: auto auto auto auto;

  /*grid-template-columns: auto minmax(100px, 200px); Após determinarmos que é grid, determinamos qual o tamplate dele/padrão dele. Determinamos quantas colunas nossa grade terá. Determinaremos aqui também a quantidade de colunas e o seus repectivos tamanhos. Com auto auto -> determinamos que será apenas duas colunas, com a mesma quantidade de linhas. 

  Podemos também determinar qual o tamanho de cada coluna individualmente, colocando os seus repectivos valores ao invés de "auto". Ex: 90px 180px 270px
  */

  /* grid-template-rows: 30px 60px 90px;O tamanho das linhas, o padrão é auto */
  grid-template-rows: 8vh 5vh 8vh;


}

.item{
  background-color: #048;
  color: white;
  border: 1px solid black;
  text-align: center;
}

/*GAP -> ESPAÇAMENTOS DO GRID*/
#gap{
  /*Adiciona espaços entre as colunas e linhas*/
  /* grid-gap: 10; /*adiciona um espaçamento tanto nas linhas quanto nas colunas, com o tamanho de 10 em ambos os lados*/
  grid-gap: 30px 50px;

  /*Adiciona espaços apenas entre as colunas*/
  /* grid-column-gap: 10px; */

  /*Adiciona espaços apenas entre as linhas*/
  /* grid-row-gap: 10px; */
}

/*Propriedade de item das grades:*/
.it1{
  /* Valores padrões: */
  /* grid-column-start: 1;Aonde ele irá iniciar */
  /* grid-column-end: 1;Aonde irá terminar */
  grid-column-start: 1;
  grid-column-end: 3;
  grid-row-start: 1;
  grid-row-end: 3;
}

.it5{
  /* grid-column-start: 4;/*vai ocupar até o quatro porém não será o quatro
  grid-column-end: 2; */
  grid-column: 4 / 2;
  grid-row: 3 / 5;
}

.it8{
  grid-column: 1 / span 2; 
}
/*GRID-AREA*/
.area{
  /* grid-area: 1 / 1 / 1 / 1; -> Padrão */
  grid-area: 1 / 1 / 3 / 4; 
  /* É uma junção de todos os atributos:
    grid-row-start:
    grid-collum-start: 
    grid-row-end:
    grid-collum-end:
   */
}

/* Aula cinco/última de grid */

.header{
  grid-area: header;
}

.principal{
  grid-area: principal;
}

.lateral{
  grid-area: lateral;
  background-color: rgb(124, 55, 55);
}

.footer{
  grid-area: footer;
}

.conatiner{
  grid-template-areas: 
    "header header header header" /*Colocamos dessa forma (com quatro headers) pois temos quatro components dentro do container, e, justamente para ele usar toda a linha, dizemos a quantidade de colunas que ele irá ocupar*/
    "principal principal principal lateral" /* "principal principal . lateral" */
    "footer footer footer footer"
  ;
}